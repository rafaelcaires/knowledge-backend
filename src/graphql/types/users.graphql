type User {
  id: ID!
  name: String!
  email: String! 
  image: String
  paper: Paper!
  registration: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AggregateUser {
  count: Int!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  image: String
  registration: String!
  paper: PaperCreateOneInput!
}

input UserCreateOneInput {
  # create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  registration_ASC
  registration_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  image: String
  registration: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  image: String
  registration: String
  paper: PaperUpdateOneRequiredInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  image: String
  registration: String
  paper: PaperUpdateOneRequiredInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  image: String
  registration: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  registration: String
  registration_not: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_lt: String
  registration_lte: String
  registration_gt: String
  registration_gte: String
  registration_contains: String
  registration_not_contains: String
  registration_starts_with: String
  registration_not_starts_with: String
  registration_ends_with: String
  registration_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  paper: PaperWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  registration: String
}

union ValidateUser = User | Validate | BatchPayload

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!

  user(where: UserWhereUniqueInput!): User

  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
}

type Mutation {
  createUser(data: UserCreateInput!): ValidateUser!

  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): ValidateUser

  deleteUser(where: UserWhereUniqueInput!): User

  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): ValidateUser!

  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): ValidateUser!

  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}
