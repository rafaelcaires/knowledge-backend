scalar DateTime
scalar Long

type BatchPayload {
  count: Long!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Article {
  id: ID!
  title: String!
  description: String
  isPublished: Boolean!
  content: String!
  user: User!
  feedbacks(where: FeedBackWhereArticleInput, orderBy: FeedBackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeedBack!]
  category: Category!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AggregateArticle {
  count: Int!
}

type ArticleConnection {
  pageInfo: PageInfo!
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateInput {
  id: ID
  title: String!
  description: String
  isPublished: Boolean
  content: String!
  user: UserCreateOneInput!
  # feedbacks: FeedBackCreateManyWithoutArticleInput
  category: CategoryCreateOneInput!
}

input ArticleCreateOneWithoutFeedbacksInput {
  # create: ArticleCreateWithoutFeedbacksInput
  connect: ArticleWhereUniqueInput
}

input ArticleCreateWithoutFeedbacksInput {
  id: ID
  title: String!
  description: String
  isPublished: Boolean
  content: String!
  user: UserCreateOneInput!
  category: CategoryCreateOneInput!
}

type ArticleEdge {
  node: Article!
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  isPublished_ASC
  isPublished_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ArticlePreviousValues {
  id: ID!
  title: String!
  description: String
  isPublished: Boolean!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  AND: [ArticleSubscriptionWhereInput!]
  OR: [ArticleSubscriptionWhereInput!]
  NOT: [ArticleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
}

input ArticleUpdateInput {
  title: String
  description: String
  isPublished: Boolean
  content: String
  user: UserUpdateOneRequiredInput
  feedbacks: FeedBackUpdateManyWithoutArticleInput
  category: CategoryUpdateOneRequiredInput
}

input ArticleUpdateManyMutationInput {
  title: String
  description: String
  isPublished: Boolean
  content: String
}

input ArticleUpdateOneRequiredWithoutFeedbacksInput {
  create: ArticleCreateWithoutFeedbacksInput
  connect: ArticleWhereUniqueInput
  update: ArticleUpdateWithoutFeedbacksDataInput
  upsert: ArticleUpsertWithoutFeedbacksInput
}

input ArticleUpdateWithoutFeedbacksDataInput {
  title: String
  description: String
  isPublished: Boolean
  content: String
  user: UserUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
}

input ArticleUpsertWithoutFeedbacksInput {
  update: ArticleUpdateWithoutFeedbacksDataInput!
  create: ArticleCreateWithoutFeedbacksInput!
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  feedbacks_every: FeedBackWhereInput
  feedbacks_some: FeedBackWhereInput
  feedbacks_none: FeedBackWhereInput
  category: CategoryWhereInput
}

input ArticleWhereUniqueInput {
  id: ID
}
union ValidateArticle = Article | Validate | BatchPayload

type Query {
  articles(
    where: ArticleWhereInput
    orderBy: ArticleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Article]!

  article(where: ArticleWhereUniqueInput!): Article

  articlesConnection(
    where: ArticleWhereInput
    orderBy: ArticleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ArticleConnection!
}

type Mutation {
  createArticle(data: ArticleCreateInput!): ValidateArticle!

  updateArticle(
    data: ArticleUpdateInput!
    where: ArticleWhereUniqueInput!
  ): ValidateArticle

  deleteArticle(where: ArticleWhereUniqueInput!): Article

  upsertArticle(
    where: ArticleWhereUniqueInput!
    create: ArticleCreateInput!
    update: ArticleUpdateInput!
  ): ValidateArticle!

  updateManyArticles(
    data: ArticleUpdateManyMutationInput!
    where: ArticleWhereInput
  ): ValidateArticle!

  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
}

type Subscription {
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
}
