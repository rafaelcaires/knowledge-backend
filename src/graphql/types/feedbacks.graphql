type FeedBack {
  id: ID!
  article: Article!
  user: User!
  isUseFul: Boolean!
  comment: String!
}

type AggregateFeedBack {
  count: Int!
}

type FeedBackConnection {
  pageInfo: PageInfo!
  edges: [FeedBackEdge]!
  aggregate: AggregateFeedBack!
}

input FeedBackCreateInput {
  id: ID
  isUseFul: Boolean
  comment: String!
  article: ArticleCreateOneWithoutFeedbacksInput!
  user: UserCreateOneInput!
}

input FeedBackCreateManyWithoutArticleInput {
  create: [FeedBackCreateWithoutArticleInput!]
  connect: [FeedBackWhereUniqueInput!]
}

input FeedBackCreateWithoutArticleInput {
  id: ID
  isUseFul: Boolean
  comment: String!
  user: UserCreateOneInput!
}

type FeedBackEdge {
  node: FeedBack!
  cursor: String!
}

enum FeedBackOrderByInput {
  id_ASC
  id_DESC
  isUseFul_ASC
  isUseFul_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeedBackPreviousValues {
  id: ID!
  isUseFul: Boolean!
  comment: String!
}

input FeedBackScalarWhereInput {
  AND: [FeedBackScalarWhereInput!]
  OR: [FeedBackScalarWhereInput!]
  NOT: [FeedBackScalarWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isUseFul: Boolean
  isUseFul_not: Boolean
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

type FeedBackSubscriptionPayload {
  mutation: MutationType!
  node: FeedBack
  updatedFields: [String!]
  previousValues: FeedBackPreviousValues
}

input FeedBackSubscriptionWhereInput {
  AND: [FeedBackSubscriptionWhereInput!]
  OR: [FeedBackSubscriptionWhereInput!]
  NOT: [FeedBackSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedBackWhereInput
}

input FeedBackUpdateInput {
  isUseFul: Boolean
  comment: String
  article: ArticleUpdateOneRequiredWithoutFeedbacksInput
  user: UserUpdateOneRequiredInput
}

input FeedBackUpdateManyDataInput {
  isUseFul: Boolean
  comment: String
}

input FeedBackUpdateManyMutationInput {
  isUseFul: Boolean
  comment: String
}

input FeedBackUpdateManyWithoutArticleInput {
  create: [FeedBackCreateWithoutArticleInput!]
  connect: [FeedBackWhereUniqueInput!]
  set: [FeedBackWhereUniqueInput!]
  disconnect: [FeedBackWhereUniqueInput!]
  delete: [FeedBackWhereUniqueInput!]
  update: [FeedBackUpdateWithWhereUniqueWithoutArticleInput!]
  updateMany: [FeedBackUpdateManyWithWhereNestedInput!]
  deleteMany: [FeedBackScalarWhereInput!]
  upsert: [FeedBackUpsertWithWhereUniqueWithoutArticleInput!]
}

input FeedBackUpdateManyWithWhereNestedInput {
  where: FeedBackScalarWhereInput!
  data: FeedBackUpdateManyDataInput!
}

input FeedBackUpdateWithoutArticleDataInput {
  isUseFul: Boolean
  comment: String
  user: UserUpdateOneRequiredInput
}

input FeedBackUpdateWithWhereUniqueWithoutArticleInput {
  where: FeedBackWhereUniqueInput!
  data: FeedBackUpdateWithoutArticleDataInput!
}

input FeedBackUpsertWithWhereUniqueWithoutArticleInput {
  where: FeedBackWhereUniqueInput!
  update: FeedBackUpdateWithoutArticleDataInput!
  create: FeedBackCreateWithoutArticleInput!
}

input FeedBackWhereInput {
  AND: [FeedBackWhereInput!]
  OR: [FeedBackWhereInput!]
  NOT: [FeedBackWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isUseFul: Boolean
  isUseFul_not: Boolean
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  article: ArticleWhereInput
  user: UserWhereInput
}

input FeedBackWhereArticleInput {
  article: ArticleWhereInput
}

input FeedBackWhereUniqueInput {
  id: ID
}

type Query {
  feedBacks(
    where: FeedBackWhereInput
    orderBy: FeedBackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [FeedBack]!

  feedBack(where: FeedBackWhereUniqueInput!): FeedBack

  feedBacksConnection(
    where: FeedBackWhereInput
    orderBy: FeedBackOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): FeedBackConnection!
}

union ValidateFeedBack = FeedBack | Validate | BatchPayload

type Mutation {
  createFeedBack(data: FeedBackCreateInput!): ValidateFeedBack!

  updateFeedBack(
    data: FeedBackUpdateInput!
    where: FeedBackWhereUniqueInput!
  ): ValidateFeedBack

  deleteFeedBack(where: FeedBackWhereUniqueInput!): FeedBack

  upsertFeedBack(
    where: FeedBackWhereUniqueInput!
    create: FeedBackCreateInput!
    update: FeedBackUpdateInput!
  ): ValidateFeedBack!

  updateManyFeedBacks(
    data: FeedBackUpdateManyMutationInput!
    where: FeedBackWhereInput
  ): ValidateFeedBack!

  deleteManyFeedBacks(where: FeedBackWhereInput): BatchPayload!
}

type Subscription {
  feedBack(where: FeedBackSubscriptionWhereInput): FeedBackSubscriptionPayload
}
